C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:14: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk = 34
        ~~~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application or sdk runs on a version of Android that is more
   recent than your targetSdkVersion specifies that it has been tested with,
   various compatibility modes kick in. This ensures that your application
   continues to work, but it may look out of place. For example, if the
   targetSdkVersion is less than 14, your app may get an option button in the
   UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:9: Warning: A newer version of compileSdkVersion than 34 is available: 36 [GradleDependency]
    compileSdk = 34
    ~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:45: Warning: A newer version of androidx.core:core-ktx than 1.12.0 is available: 1.16.0 [GradleDependency]
    implementation("androidx.core:core-ktx:1.12.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:46: Warning: A newer version of androidx.activity:activity-compose than 1.8.2 is available: 1.10.1 [GradleDependency]
    implementation("androidx.activity:activity-compose:1.8.2")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:47: Warning: A newer version of androidx.compose.ui:ui than 1.5.4 is available: 1.8.3 [GradleDependency]
    implementation("androidx.compose.ui:ui:1.5.4")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:48: Warning: A newer version of androidx.compose.material3:material3 than 1.1.2 is available: 1.3.2 [GradleDependency]
    implementation("androidx.compose.material3:material3:1.1.2")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:49: Warning: A newer version of androidx.lifecycle:lifecycle-runtime-ktx than 2.6.2 is available: 2.9.2 [GradleDependency]
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.2")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:50: Warning: A newer version of androidx.compose.ui:ui-tooling-preview than 1.5.4 is available: 1.8.3 [GradleDependency]
    implementation("androidx.compose.ui:ui-tooling-preview:1.5.4")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:51: Warning: A newer version of androidx.compose.ui:ui-tooling than 1.5.4 is available: 1.8.3 [GradleDependency]
    debugImplementation("androidx.compose.ui:ui-tooling:1.5.4")
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:54: Warning: A newer version of androidx.lifecycle:lifecycle-viewmodel-compose than 2.7.0 is available: 2.9.2 [GradleDependency]
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:55: Warning: A newer version of androidx.compose.runtime:runtime-livedata than 1.5.4 is available: 1.8.3 [GradleDependency]
    implementation("androidx.compose.runtime:runtime-livedata:1.5.4")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:63: Warning: A newer version of androidx.room:room-runtime than 2.6.1 is available: 2.7.2 [GradleDependency]
    implementation("androidx.room:room-runtime:2.6.1")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:64: Warning: A newer version of androidx.room:room-ktx than 2.6.1 is available: 2.7.2 [GradleDependency]
    implementation("androidx.room:room-ktx:2.6.1")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:67: Warning: A newer version of androidx.compose.material:material-icons-extended than 1.5.4 is available: 1.7.8 [GradleDependency]
    implementation("androidx.compose.material:material-icons-extended:1.5.4")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:70: Warning: A newer version of androidx.security:security-crypto than 1.1.0-alpha06 is available: 1.1.0-beta01 [GradleDependency]
    implementation("androidx.security:security-crypto:1.1.0-alpha06")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:58: Warning: A newer version of com.squareup.retrofit2:retrofit than 2.9.0 is available: 3.0.0 [NewerVersionAvailable]
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:59: Warning: A newer version of com.squareup.retrofit2:converter-gson than 2.9.0 is available: 3.0.0 [NewerVersionAvailable]
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:60: Warning: A newer version of com.squareup.okhttp3:logging-interceptor than 4.12.0 is available: 5.1.0 [NewerVersionAvailable]
    implementation("com.squareup.okhttp3:logging-interceptor:4.12.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\build.gradle.kts:73: Warning: A newer version of org.jetbrains.kotlinx:kotlinx-serialization-json than 1.6.0 is available: 1.9.0 [NewerVersionAvailable]
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "NewerVersionAvailable":
   This detector checks with a central repository to see if there are newer
   versions available for the dependencies used by this project. This is
   similar to the GradleDependency check, which checks for newer versions
   available in the Android SDK tools and libraries, but this works with any
   MavenCentral dependency, and connects to the library every time, which
   makes it more flexible but also much slower.

C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\service\FloatingChatService.kt:73: Warning: Unnecessary; SDK_INT is always >= 24 [ObsoleteSdkInt]
            return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\utils\PermissionManager.kt:24: Warning: Unnecessary; SDK_INT is always >= 24 [ObsoleteSdkInt]
            return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\utils\PermissionManager.kt:35: Warning: Unnecessary; SDK_INT is always >= 24 [ObsoleteSdkInt]
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

C:\Users\krazi\mobile-projects\argus\app\src\main\res\values\colors.xml:2: Warning: The resource R.color.colorPrimary appears to be unused [UnusedResources]
    <color name="colorPrimary">#00CED1</color>
           ~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\res\values\colors.xml:3: Warning: The resource R.color.colorPrimaryVariant appears to be unused [UnusedResources]
    <color name="colorPrimaryVariant">#009FAE</color>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\res\values\colors.xml:4: Warning: The resource R.color.colorOnPrimary appears to be unused [UnusedResources]
    <color name="colorOnPrimary">#FFFFFF</color>
           ~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\res\values\strings.xml:2: Warning: The resource R.string.app_name appears to be unused [UnusedResources]
    <string name="app_name">Argus</string>
            ~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

   Available options:

   **skip-libraries** (default is true):
   Whether the unused resource check should skip reporting unused resources in libraries.

   Many libraries will declare resources that are part of the library surface; other modules depending on the library will also reference the resources. To avoid reporting all these resources as unused (in the context of a library), the unused resource check normally skips reporting unused resources in libraries. Instead, run the unused resource check on the consuming app module (along with `checkDependencies=true`).

   However, there are cases where you want to check that all the resources declared in a library are used; in that case, you can disable the skip option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UnusedResources">
           <option name="skip-libraries" value="true" />
       </issue>
   </lint>
   ```

C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\utils\ApiKeyManager.kt:33: Warning: Use the KTX extension function SharedPreferences.edit instead? [UseKtx]
        encryptedPrefs.edit()
        ~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\utils\ApiKeyManager.kt:43: Warning: Use the KTX extension function SharedPreferences.edit instead? [UseKtx]
        encryptedPrefs.edit()
        ~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\utils\ApiKeyManager.kt:53: Warning: Use the KTX extension function SharedPreferences.edit instead? [UseKtx]
        encryptedPrefs.edit()
        ~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\utils\ApiKeyManager.kt:71: Warning: Use the KTX extension function SharedPreferences.edit instead? [UseKtx]
        encryptedPrefs.edit()
        ~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\utils\ApiKeyManager.kt:77: Warning: Use the KTX extension function SharedPreferences.edit instead? [UseKtx]
        encryptedPrefs.edit()
        ~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\utils\ApiKeyManager.kt:83: Warning: Use the KTX extension function SharedPreferences.edit instead? [UseKtx]
        encryptedPrefs.edit()
        ~~~~~~~~~~~~~~~~~~~~~
C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\utils\PermissionManager.kt:39: Warning: Use the KTX extension function String.toUri instead? [UseKtx]
                        Uri.parse("package:${activity.packageName}")
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UseKtx":
   The Android KTX libraries decorates the Android platform SDK as well as
   various libraries with more convenient extension functions available from
   Kotlin, allowing you to use default parameters, named parameters, and
   more.

   Available options:

   **remove-defaults** (default is true):
   Whether to skip arguments that match the defaults provided by the extension.

   Extensions often provide default values for some of the parameters. For example:
   ```kotlin
   fun Path.readLines(charset: Charset = Charsets.UTF_8): List<String> { return Files.readAllLines(this, charset) }
   ```
   This lint check will by default automatically omit parameters that match the default, so if your code was calling

   ```kotlin
   Files.readAllLines(file, Charset.UTF_8)
   ```
   lint would replace this with
   ```kotlin
   file.readLines()
   ```
   rather than

   ```kotlin
   file.readLines(Charset.UTF_8
   ```
   You can turn this behavior off using this option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="remove-defaults" value="true" />
       </issue>
   </lint>
   ```

   **require-present** (default is true):
   Whether to only offer extensions already available.

   This option lets you only have lint suggest extension replacements if those extensions are already available on the class path (in other words, you're already depending on the library containing the extension method.)

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="require-present" value="true" />
       </issue>
   </lint>
   ```

C:\Users\krazi\mobile-projects\argus\app\src\main\java\com\argus\app\service\FloatingChatService.kt:189: Warning: onTouch lambda should call View#performClick when a click is detected [ClickableViewAccessibility]
        floatingView?.setOnTouchListener { _, event ->
                                         ^

   Explanation for issues of type "ClickableViewAccessibility":
   If a View that overrides onTouchEvent or uses an OnTouchListener does not
   also implement performClick and call it when clicks are detected, the View
   may not handle accessibility actions properly. Logic handling the click
   actions should ideally be placed in View#performClick as some accessibility
   services invoke performClick when a click action should occur.

0 errors, 34 warnings
